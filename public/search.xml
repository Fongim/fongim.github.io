<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>判断一个 NSArray 是否为空</title>
      <link href="/if-nsarray-null/"/>
      <url>/if-nsarray-null/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if ([array isKindOfClass:[NSArray class]] &amp;&amp; array.count &gt; 0)</span><br><span class="line">&#123;</span><br><span class="line">    NSLog(@&quot;这是一个非空数组&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> Tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Objective-C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iPhone屏幕各种尺寸分辨率（更新至XS）</title>
      <link href="/iphone-pixel-point-size-scale/"/>
      <url>/iphone-pixel-point-size-scale/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>Device</th><th>Logic Point</th><th>Logic Pixel</th><th>Size</th><th>Scale</th></tr></thead><tbody><tr><td>iPhone 2G</td><td>480 × 320</td><td>480 × 320</td><td>3.5</td><td>1x</td></tr><tr><td>iPhone 3</td><td>480 × 320</td><td>480 × 320</td><td>3.5</td><td>1x</td></tr><tr><td>iPhone 3GS</td><td>480 × 320</td><td>480 × 320</td><td>3.5</td><td>1x</td></tr><tr><td>iPhone 4</td><td>480 × 320</td><td>960 × 640</td><td>3.5</td><td>2x</td></tr><tr><td>iPhone 4S</td><td>480 × 320</td><td>960 × 640</td><td>3.5</td><td>2x</td></tr><tr><td>iPhone 5</td><td>568 × 320</td><td>1136 × 640</td><td>4.0</td><td>2x</td></tr><tr><td>iPhone 5S</td><td>568 × 320</td><td>1136 × 640</td><td>4.0</td><td>2x</td></tr><tr><td>iPhone 5C</td><td>568 × 320</td><td>1136 × 640</td><td>4.0</td><td>2x</td></tr><tr><td>iPhone 6</td><td>667 × 375</td><td>1334 × 750</td><td>4.7</td><td>2x</td></tr><tr><td>iPhone 6 Plus</td><td>736 × 414</td><td>2208 × 1242</td><td>5.5</td><td>3x</td></tr><tr><td>iPhone 6S</td><td>667 × 375</td><td>1334 × 750</td><td>4.7</td><td>2x</td></tr><tr><td>iPhone 6S Plus</td><td>736 × 414</td><td>2208 × 1242</td><td>5.5</td><td>3x</td></tr><tr><td>iPhone SE</td><td>568 × 320</td><td>1136 × 640</td><td>4.0</td><td>2x</td></tr><tr><td>iPhone 7</td><td>667 × 375</td><td>1334 × 750</td><td>4.7</td><td>2x</td></tr><tr><td>iPhone 7 Plus</td><td>736 × 414</td><td>2208 × 1242</td><td>5.5</td><td>3x</td></tr><tr><td>iPhone 8</td><td>667 × 375</td><td>1334 × 750</td><td>4.7</td><td>2x</td></tr><tr><td>iPhone 8 Plus</td><td>736 × 414</td><td>2208 × 1242</td><td>5.5</td><td>3x</td></tr><tr><td>iPhone X</td><td>812 × 375</td><td>2436 × 1125</td><td>5.8</td><td>3x</td></tr><tr><td>iPhone XS</td><td>812 × 375</td><td>2436 × 1125</td><td>5.8</td><td>3x</td></tr><tr><td>iPhone XR</td><td>896 × 414</td><td>1792 × 828</td><td>6.1</td><td>2x</td></tr><tr><td>iPhone XS Max</td><td>896 × 414</td><td>2688 × 1242</td><td>6.5</td><td>3x</td></tr></tbody></table><hr>]]></content>
      
      
      <categories>
          
          <category> Tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Objective-C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS 判断NSString值是否为空或null并转换为空字符串</title>
      <link href="/transfer-null-to-nsstring/"/>
      <url>/transfer-null-to-nsstring/</url>
      
        <content type="html"><![CDATA[<p>遇到了一个后台json误将null作为字符串值导致iOS客户端崩溃闪退的问题，解决方法如下：套一层判断，如果是各种情况的null则转换为@””。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+ (NSString *) nullToString:(id)string &#123;</span><br><span class="line">    if ([string isEqual:@&quot;NULL&quot;] || [string isKindOfClass:[NSNull class]] || [string isEqual:[NSNull null]] || [string isEqual:NULL] || [[string class] isSubclassOfClass:[NSNull class]] || string == nil || string == NULL || [string isKindOfClass:[NSNull class]] || [[string stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]] length]==0 || [string isEqualToString:@&quot;&lt;null&gt;&quot;] || [string isEqualToString:@&quot;(null)&quot;]) &#123;</span><br><span class="line">        return @&quot;&quot;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return (NSString *)string;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> Tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Objective-C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS MJExtension使用方法指南(Objective-C)</title>
      <link href="/mj-extension-guide/"/>
      <url>/mj-extension-guide/</url>
      
        <content type="html"><![CDATA[<h2 id="MJExtension能做什么？"><a href="#MJExtension能做什么？" class="headerlink" title="MJExtension能做什么？"></a>MJExtension能做什么？</h2><h5 id="1-MJExtension是一套字典和模型之间互相转换的超轻量级框架"><a href="#1-MJExtension是一套字典和模型之间互相转换的超轻量级框架" class="headerlink" title="1. MJExtension是一套字典和模型之间互相转换的超轻量级框架"></a>1. MJExtension是一套字典和模型之间互相转换的超轻量级框架</h5><h5 id="2-MJExtension能完成的功能"><a href="#2-MJExtension能完成的功能" class="headerlink" title="2. MJExtension能完成的功能"></a>2. MJExtension能完成的功能</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">字典（JSON） --&gt; 模型（Model）</span><br><span class="line">模型（Model） --&gt; 字典（JSON）</span><br><span class="line">字典数组（JSON Array） --&gt; 模型数组（Model Array）</span><br><span class="line">模型数组（Model Array） --&gt; 字典数组（JSON Array）</span><br></pre></td></tr></table></figure><p><code>详尽用法主要参考 main.m中的各个函数 以及 NSObject+MJKeyValue.h</code></p><h2 id="MJExtension和JSONModel、Mantle等框架的区别"><a href="#MJExtension和JSONModel、Mantle等框架的区别" class="headerlink" title="MJExtension和JSONModel、Mantle等框架的区别"></a>MJExtension和JSONModel、Mantle等框架的区别</h2><h5 id="1-转换速率："><a href="#1-转换速率：" class="headerlink" title="1. 转换速率："></a>1. 转换速率：</h5><p>最近一次测试表明：<code>MJExtension &gt; JSONModel &gt; Mantle</code> 各位开发者也可以自行测试</p><h5 id="2-具体用法："><a href="#2-具体用法：" class="headerlink" title="2. 具体用法："></a>2. 具体用法：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">JSONModel：</span><br><span class="line"></span><br><span class="line">要求所有模型类必须继承自JSONModel基类</span><br><span class="line"></span><br><span class="line">Mantle：</span><br><span class="line"></span><br><span class="line">要求所有模型类必须继承自MTModel基类</span><br><span class="line"></span><br><span class="line">MJExtension：</span><br><span class="line"></span><br><span class="line">不需要你的模型类继承任何特殊基类，毫无污染，毫无侵入性</span><br></pre></td></tr></table></figure><h2 id="如何安装MJExtension"><a href="#如何安装MJExtension" class="headerlink" title="如何安装MJExtension"></a>如何安装MJExtension</h2><p>方法一：cocoapods导入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod &apos;MJExtension&apos;</span><br></pre></td></tr></table></figure><p>方法二：手动导入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">将MJExtensionExample/MJExtensionExample/MJExtension文件夹中的所有源代码拽入项目中</span><br><span class="line">导入主头文件：#import &quot;MJExtension.h&quot;</span><br><span class="line">MJExtension.h</span><br><span class="line">MJConst.h</span><br><span class="line">MJConst.m</span><br><span class="line">MJFoundation.h</span><br><span class="line">MJFoundation.m</span><br><span class="line">MJIvar.h</span><br><span class="line">MJIvar.m</span><br><span class="line">MJType.h</span><br><span class="line">MJType.m</span><br><span class="line">NSObject+MJCoding.h</span><br><span class="line">NSObject+MJCoding.m</span><br><span class="line">NSObject+MJIvar.h</span><br><span class="line">NSObject+MJIvar.m</span><br><span class="line">NSObject+MJKeyValue.h</span><br><span class="line">NSObject+MJKeyValue.m</span><br></pre></td></tr></table></figure><h2 id="如何使用MJExtension"><a href="#如何使用MJExtension" class="headerlink" title="如何使用MJExtension"></a>如何使用MJExtension</h2><h4 id="1-最简单的字典转模型"><a href="#1-最简单的字典转模型" class="headerlink" title="1. 最简单的字典转模型"></a>1. 最简单的字典转模型</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">typedef enum &#123;</span><br><span class="line">    SexMale,    </span><br><span class="line">    SexFemale&#125; Sex;</span><br><span class="line">@interface User : NSObject</span><br><span class="line">@property (copy, nonatomic) NSString *name;</span><br><span class="line">@property (copy, nonatomic) NSString *icon;</span><br><span class="line">@property (assign, nonatomic) int age;</span><br><span class="line">@property (assign, nonatomic) double height;</span><br><span class="line">@property (strong, nonatomic) NSNumber *money;</span><br><span class="line">@property (assign, nonatomic) Sex sex;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">NSDictionary *dict = @&#123;</span><br><span class="line">                        @&quot;name&quot; : @&quot;Jack&quot;,                 </span><br><span class="line">                        @&quot;icon&quot; : @&quot;lufy.png&quot;,               </span><br><span class="line">                        @&quot;age&quot; : @20,               </span><br><span class="line">                        @&quot;height&quot; : @&quot;1.55&quot;,               </span><br><span class="line">                        @&quot;money&quot; : @100.9,               </span><br><span class="line">                        @&quot;sex&quot; : @(SexFemale)            </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 将字典转为User模型</span><br><span class="line">User *user = [User objectWithKeyValues:dict];</span><br><span class="line">NSLog(@&quot;name=%@, icon=%@, age=%d, height=%@, money=%@, sex=%d&quot;, user.name, user.icon, user.age, user.height, user.money, user.sex);</span><br><span class="line">// name=Jack, icon=lufy.png, age=20, height=1.550000, money=100.9, sex=1</span><br></pre></td></tr></table></figure><h5 id="核心代码1："><a href="#核心代码1：" class="headerlink" title="核心代码1："></a>核心代码1：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[User objectWithKeyValues:dict]</span><br></pre></td></tr></table></figure><h4 id="2-模型中嵌套模型"><a href="#2-模型中嵌套模型" class="headerlink" title="2. 模型中嵌套模型"></a>2. 模型中嵌套模型</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">@interface Status : NSObject</span><br><span class="line">/** 微博文本内容 */</span><br><span class="line">@property (copy, nonatomic) NSString *text;</span><br><span class="line">/** 微博作者 */</span><br><span class="line">@property (strong, nonatomic) User *user;</span><br><span class="line">/** 转发的微博 */</span><br><span class="line">@property (strong, nonatomic) Status *retweetedStatus;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">NSDictionary *dict = @&#123;               </span><br><span class="line">@&quot;text&quot; : @&quot;是啊，今天天气确实不错！&quot;, </span><br><span class="line">@&quot;user&quot; : @&#123;                   </span><br><span class="line">             @&quot;name&quot; : @&quot;Jack&quot;,                   </span><br><span class="line">             @&quot;icon&quot; : @&quot;lufy.png&quot;                </span><br><span class="line">           &#125;,               </span><br><span class="line">@&quot;retweetedStatus&quot; : @&#123;                   </span><br><span class="line">                        @&quot;text&quot; : @&quot;今天天气真不错！&quot;,                   </span><br><span class="line">                        @&quot;user&quot; : @&#123;                       </span><br><span class="line">                                    @&quot;name&quot; : @&quot;Rose&quot;,                       </span><br><span class="line">                                    @&quot;icon&quot; : @&quot;nami.png&quot;                    </span><br><span class="line">                                   &#125;                </span><br><span class="line">                       &#125;            </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 将字典转为Status模型</span><br><span class="line">Status *status = [Status objectWithKeyValues:dict];</span><br><span class="line">NSString *text = status.text;</span><br><span class="line">NSString *name = status.user.name;</span><br><span class="line">NSString *icon = status.user.icon;</span><br><span class="line">NSLog(@&quot;text=%@, name=%@, icon=%@&quot;, text, name, icon);</span><br><span class="line">// text=是啊，今天天气确实不错！, name=Jack, icon=lufy.png</span><br><span class="line"></span><br><span class="line">NSString *text2 = status.retweetedStatus.text;</span><br><span class="line">NSString *name2 = status.retweetedStatus.user.name;</span><br><span class="line">NSString *icon2 = status.retweetedStatus.user.icon;</span><br><span class="line">NSLog(@&quot;text2=%@, name2=%@, icon2=%@&quot;, text2, name2, icon2);</span><br><span class="line">// text2=今天天气真不错！, name2=Rose, icon2=nami.png</span><br></pre></td></tr></table></figure><h5 id="核心代码2"><a href="#核心代码2" class="headerlink" title="核心代码2"></a>核心代码2</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Status objectWithKeyValues:dict]`</span><br></pre></td></tr></table></figure><h4 id="3-模型中有个数组属性，数组里面又要装着其它模型"><a href="#3-模型中有个数组属性，数组里面又要装着其它模型" class="headerlink" title="3. 模型中有个数组属性，数组里面又要装着其它模型"></a>3. 模型中有个数组属性，数组里面又要装着其它模型</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">@interface Ad : NSObject</span><br><span class="line">@property (copy, nonatomic) NSString *image;</span><br><span class="line">@property (copy, nonatomic) NSString *url;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@interface StatusResult : NSObject</span><br><span class="line">/** 存放着一堆的微博数据（里面都是Status模型） */</span><br><span class="line">@property (strong, nonatomic) NSMutableArray *statuses;</span><br><span class="line">/** 存放着一堆的广告数据（里面都是Ad模型） */</span><br><span class="line">@property (strong, nonatomic) NSArray *ads;</span><br><span class="line">@property (strong, nonatomic) NSNumber *totalNumber;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation StatusResult</span><br><span class="line">// 实现这个方法的目的：告诉MJExtension框架statuses和ads数组里面装的是什么模型</span><br><span class="line">/*    + (NSDictionary *)objectClassInArray&#123;    </span><br><span class="line">return @&#123;         </span><br><span class="line">@&quot;statuses&quot; : [Status class],         </span><br><span class="line">@&quot;ads&quot; : [Ad class]    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">+ (Class)objectClassInArray:(NSString *)propertyName&#123;    </span><br><span class="line">if ([propertyName isEqualToString:@&quot;statuses&quot;]) &#123;        </span><br><span class="line">return [Status class];    </span><br><span class="line">&#125; else if ([propertyName isEqualToString:@&quot;ads&quot;]) &#123;        </span><br><span class="line">return [Ad class];    &#125;    </span><br><span class="line">return nil;&#125;</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">// 这个方法对比上面的2个方法更加没有侵入性和污染，因为不需要导入Status和Ad的头文件</span><br><span class="line">+ (NSDictionary *)objectClassInArray&#123;    </span><br><span class="line">    return @&#123;         </span><br><span class="line">              @&quot;statuses&quot; : @&quot;Status&quot;,         </span><br><span class="line">              @&quot;ads&quot; : @&quot;Ad&quot;    </span><br><span class="line">            &#125;;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">NSDictionary *dict = @&#123;                       </span><br><span class="line">@&quot;statuses&quot; : @[                           </span><br><span class="line">                @&#123;                                   </span><br><span class="line">                   @&quot;text&quot; : @&quot;今天天气真不错！&quot;,</span><br><span class="line">                   @&quot;user&quot; : @&#123;                                   </span><br><span class="line">                                @&quot;name&quot; : @&quot;Rose&quot;,</span><br><span class="line">                                @&quot;icon&quot; : @&quot;nami.png&quot;                                                                                  </span><br><span class="line">                              &#125;                            </span><br><span class="line">                 &#125;, </span><br><span class="line"></span><br><span class="line">                 @&#123;                               </span><br><span class="line">                    @&quot;text&quot; : @&quot;明天去旅游了&quot;, </span><br><span class="line">                    @&quot;user&quot; : @&#123;                                                                   </span><br><span class="line">                                 @&quot;name&quot; : @&quot;Jack&quot;,                                       </span><br><span class="line">                                 @&quot;icon&quot; : @&quot;lufy.png&quot;                               </span><br><span class="line">                               &#125;  </span><br><span class="line">                   &#125; </span><br><span class="line"></span><br><span class="line">                ],                       </span><br><span class="line"> @&quot;ads&quot; :@[                           </span><br><span class="line">           @&#123;                               </span><br><span class="line">              @&quot;image&quot; : @&quot;ad01.png&quot;, </span><br><span class="line">              @&quot;url&quot; : @&quot;http://www.ad01.com&quot;                                                          </span><br><span class="line">            &#125;, </span><br><span class="line"></span><br><span class="line">           @&#123;                               </span><br><span class="line">              @&quot;image&quot; : @&quot;ad02.png&quot;,                                   </span><br><span class="line">              @&quot;url&quot; : @&quot;http://www.ad02.com&quot;                           </span><br><span class="line">            &#125;                       </span><br><span class="line">          ],                       </span><br><span class="line"> @&quot;totalNumber&quot; : @&quot;2014&quot;                    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">         // 将字典转为StatusResult模型</span><br><span class="line">         StatusResult *result = [StatusResult objectWithKeyValues:dict];</span><br><span class="line">         NSLog(@&quot;totalNumber=%@&quot;, result.totalNumber);</span><br><span class="line">         // totalNumber=2014</span><br><span class="line"></span><br><span class="line">         // 打印statuses数组中的模型属性</span><br><span class="line">         for (Status *status in result.statuses) &#123;    </span><br><span class="line">                NSString *text = status.text;    </span><br><span class="line">                NSString *name = status.user.name;    NSString *icon = status.user.icon;    </span><br><span class="line">                NSLog(@&quot;text=%@, name=%@, icon=%@&quot;, text, name, icon);&#125;</span><br><span class="line">               // text=今天天气真不错！, name=Rose, icon=nami.png</span><br><span class="line">               // text=明天去旅游了, name=Jack, icon=lufy.png</span><br><span class="line"></span><br><span class="line">         // 打印ads数组中的模型属性</span><br><span class="line">         for (Ad *ad in result.ads) &#123;    </span><br><span class="line">                 NSLog(@&quot;image=%@, url=%@&quot;, ad.image, ad.url);&#125;</span><br><span class="line">                 // image=ad01.png, url=http://www.ad01.com</span><br><span class="line">                 // image=ad02.png, url=http://www.ad02.com</span><br></pre></td></tr></table></figure><h5 id="核心代码3："><a href="#核心代码3：" class="headerlink" title="核心代码3："></a>核心代码3：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在模型内部实现+ (NSDictionary *)objectClassInArray方法</span><br><span class="line"></span><br><span class="line">[StatusResult objectWithKeyValues:dict]</span><br></pre></td></tr></table></figure><h4 id="4-模型中的属性名和字典中的key不相同-或者需要多级映射"><a href="#4-模型中的属性名和字典中的key不相同-或者需要多级映射" class="headerlink" title="4. 模型中的属性名和字典中的key不相同(或者需要多级映射)"></a>4. 模型中的属性名和字典中的key不相同(或者需要多级映射)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">@interface Bag : NSObject</span><br><span class="line">@property (copy, nonatomic) NSString *name;</span><br><span class="line">@property (assign, nonatomic) double price;@end@interface Student : NSObject</span><br><span class="line">@property (copy, nonatomic) NSString *ID;</span><br><span class="line">@property (copy, nonatomic) NSString *desc;</span><br><span class="line">@property (copy, nonatomic) NSString *nowName;</span><br><span class="line">@property (copy, nonatomic) NSString *oldName;</span><br><span class="line">@property (copy, nonatomic) NSString *nameChangedTime;</span><br><span class="line">@property (strong, nonatomic) Bag *bag;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation Student</span><br><span class="line">// 实现这个方法的目的：告诉MJExtension框架模型中的属性名对应着字典的哪个key</span><br><span class="line">+ (NSDictionary *)replacedKeyFromPropertyName&#123;    </span><br><span class="line">     return @&#123;                </span><br><span class="line">               @&quot;ID&quot; : @&quot;id&quot;,                </span><br><span class="line">               @&quot;desc&quot; : @&quot;desciption&quot;,                </span><br><span class="line">               @&quot;oldName&quot; : @&quot;name.oldName&quot;, </span><br><span class="line">               @&quot;nowName&quot; : @&quot;name.newName&quot;,  </span><br><span class="line">               @&quot;nameChangedTime&quot; : @&quot;name.info.nameChangedTime&quot;,                                       </span><br><span class="line">               @&quot;bag&quot; : @&quot;other.bag&quot;            </span><br><span class="line">              &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">NSDictionary *dict = @&#123;                       </span><br><span class="line">                        @&quot;id&quot; : @&quot;20&quot;,                       </span><br><span class="line">                        @&quot;desciption&quot; : @&quot;孩子&quot;,</span><br><span class="line">                        @&quot;name&quot; : @&#123;                                                         </span><br><span class="line">                                     @&quot;newName&quot; : @&quot;lufy&quot;, </span><br><span class="line">                                     @&quot;oldName&quot; : @&quot;kitty&quot;,  </span><br><span class="line">                                     @&quot;info&quot; : @&#123;                                                                                                   </span><br><span class="line">                                                  @&quot;nameChangedTime&quot; : @&quot;2013-08&quot;                            </span><br><span class="line">                                                 &#125;                       </span><br><span class="line">                                    &#125;,                       </span><br><span class="line">                        @&quot;other&quot; : @&#123;                            </span><br><span class="line">                                      @&quot;bag&quot; : @&#123;                                </span><br><span class="line">                                                  @&quot;name&quot; : @&quot;小书包&quot;, </span><br><span class="line">                                                  @&quot;price&quot; : @100.7                                                              </span><br><span class="line">                                                 &#125;                       </span><br><span class="line">                                     &#125;                   </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 将字典转为Student模型</span><br><span class="line">Student *stu = [Student objectWithKeyValues:dict];</span><br><span class="line">// 打印Student模型的属性</span><br><span class="line">NSLog(@&quot;ID=%@, desc=%@, oldName=%@, nowName=%@, nameChangedTime=%@&quot;, stu.ID, stu.desc, stu.oldName, stu.nowName, stu.nameChangedTime);</span><br><span class="line">// ID=20, desc=孩子, oldName=kitty, nowName=lufy, nameChangedTime=2013-08</span><br><span class="line">NSLog(@&quot;bagName=%@, bagPrice=%f&quot;, stu.bag.name, stu.bag.price);</span><br><span class="line">// bagName=小书包, bagPrice=100.700000</span><br></pre></td></tr></table></figure><h5 id="核心代码4："><a href="#核心代码4：" class="headerlink" title="核心代码4："></a>核心代码4：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在模型内部实现+ (NSDictionary *)replacedKeyFromPropertyName方法</span><br><span class="line"></span><br><span class="line">[Student objectWithKeyValues:dict]</span><br></pre></td></tr></table></figure><h4 id="5-将一个字典数组转成模型数组"><a href="#5-将一个字典数组转成模型数组" class="headerlink" title="5. 将一个字典数组转成模型数组"></a>5. 将一个字典数组转成模型数组</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">NSArray *dictArray = @[                       </span><br><span class="line">                        @&#123;                           </span><br><span class="line">                           @&quot;name&quot; : @&quot;Jack&quot;,                           </span><br><span class="line">                           @&quot;icon&quot; : @&quot;lufy.png&quot;,                        </span><br><span class="line">                         &#125;,                       </span><br><span class="line">                        @&#123;                           </span><br><span class="line">                           @&quot;name&quot; : @&quot;Rose&quot;,                           </span><br><span class="line">                           @&quot;icon&quot; : @&quot;nami.png&quot;,                        </span><br><span class="line">                         &#125;                    </span><br><span class="line">                       ];</span><br><span class="line"></span><br><span class="line">// 将字典数组转为User模型数组</span><br><span class="line">NSArray *userArray = [User objectArrayWithKeyValuesArray:dictArray];</span><br><span class="line">// 打印userArray数组中的User模型属性</span><br><span class="line">for (User *user in userArray) &#123;   </span><br><span class="line">      NSLog(@&quot;name=%@, icon=%@&quot;, user.name, user.icon);&#125;</span><br><span class="line">      // name=Jack, icon=lufy.png</span><br><span class="line">      // name=Rose, icon=nami.png</span><br></pre></td></tr></table></figure><h5 id="核心代码5："><a href="#核心代码5：" class="headerlink" title="核心代码5："></a>核心代码5：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[User objectArrayWithKeyValuesArray:dictArray]</span><br></pre></td></tr></table></figure><h4 id="6-将一个模型转成字典"><a href="#6-将一个模型转成字典" class="headerlink" title="6. 将一个模型转成字典"></a>6. 将一个模型转成字典</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 新建模型</span><br><span class="line">  User *user = [[User alloc] init];</span><br><span class="line">user.name = @&quot;Jack&quot;;</span><br><span class="line">user.icon = @&quot;lufy.png&quot;;</span><br><span class="line"></span><br><span class="line">Status *status = [[Status alloc] init];</span><br><span class="line">status.user = user;</span><br><span class="line">status.text = @&quot;今天的心情不错！&quot;;</span><br></pre></td></tr></table></figure><p>​<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">// 将模型转为字典</span><br><span class="line">NSDictionary *statusDict = status.keyValues;</span><br><span class="line">NSLog(@&quot;%@&quot;, statusDict);</span><br><span class="line">/*&#123; text = &quot;今天的心情不错！&quot;;    </span><br><span class="line">    user = &#123;        </span><br><span class="line">             icon = &quot;lufy.png&quot;;        </span><br><span class="line">             name = Jack;    </span><br><span class="line">           &#125;;</span><br><span class="line">  &#125;*/</span><br><span class="line"></span><br><span class="line">// 多级映射的模型</span><br><span class="line">Student *stu = [[Student alloc] init];</span><br><span class="line">stu.ID = @&quot;123&quot;;</span><br><span class="line">stu.oldName = @&quot;rose&quot;;</span><br><span class="line">stu.nowName = @&quot;jack&quot;;</span><br><span class="line">stu.desc = @&quot;handsome&quot;;</span><br><span class="line">stu.nameChangedTime = @&quot;2018-09-08&quot;;</span><br><span class="line"></span><br><span class="line">Bag *bag = [[Bag alloc] init];</span><br><span class="line">bag.name = @&quot;小书包&quot;;</span><br><span class="line">bag.price = 205;</span><br><span class="line">stu.bag = bag;</span><br><span class="line">NSDictionary *stuDict = stu.keyValues;NSLog(@&quot;%@&quot;, stuDict);</span><br><span class="line">/*</span><br><span class="line">&#123;    desciption = handsome;    </span><br><span class="line">       id = 123;    </span><br><span class="line">       name = &#123;        </span><br><span class="line">                info =&#123;            </span><br><span class="line">                nameChangedTime = &quot;2018-09-08&quot;;        </span><br><span class="line">                       &#125;;        </span><br><span class="line">                newName = jack;        </span><br><span class="line">                oldName = rose;    </span><br><span class="line">               &#125;;    </span><br><span class="line">                other = &#123;  </span><br><span class="line">                          bag =&#123;            </span><br><span class="line">                                 name = &quot;小书包&quot;;            </span><br><span class="line">                                 price = 205;        </span><br><span class="line">                               &#125;;    </span><br><span class="line">                        &#125;; </span><br><span class="line">               &#125;</span><br><span class="line"> */</span><br></pre></td></tr></table></figure></p><h5 id="核心代码6："><a href="#核心代码6：" class="headerlink" title="核心代码6："></a>核心代码6：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">status.keyValues、stu.keyValues</span><br></pre></td></tr></table></figure><h4 id="7-将一个模型数组转成字典数组"><a href="#7-将一个模型数组转成字典数组" class="headerlink" title="7. 将一个模型数组转成字典数组"></a>7. 将一个模型数组转成字典数组</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 新建模型数组</span><br><span class="line">  User *user1 = [[User alloc] init];</span><br><span class="line">user1.name = @&quot;Jack&quot;;</span><br><span class="line">user1.icon = @&quot;lufy.png&quot;;</span><br><span class="line"></span><br><span class="line">User *user2 = [[User alloc] init];</span><br><span class="line">user2.name = @&quot;Rose&quot;;</span><br><span class="line">user2.icon = @&quot;nami.png&quot;;</span><br><span class="line"></span><br><span class="line">NSArray *userArray = @[user1, user2];</span><br><span class="line">// 将模型数组转为字典数组</span><br><span class="line">NSArray *dictArray = [User keyValuesArrayWithObjectArray:userArray];</span><br><span class="line">NSLog(@&quot;%@&quot;, dictArray);</span><br><span class="line">/*(    </span><br><span class="line">&#123;        icon = &quot;lufy.png&quot;;        name = Jack;    &#125;,    </span><br><span class="line">&#123;        icon = &quot;nami.png&quot;;        name = Rose;    &#125;  )*/</span><br></pre></td></tr></table></figure><h6 id="核心代码7："><a href="#核心代码7：" class="headerlink" title="核心代码7："></a>核心代码7：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[User keyValuesArrayWithObjectArray:userArray]</span><br></pre></td></tr></table></figure><h4 id="更多用法"><a href="#更多用法" class="headerlink" title="更多用法"></a>更多用法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">参考NSObject+MJKeyValue.h</span><br><span class="line">参考NSObject+MJCoding.h</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> Tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Objective-C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS UIScrollView的代理方法汇总</title>
      <link href="/ios-uiscrollview-delegate-methods/"/>
      <url>/ios-uiscrollview-delegate-methods/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">@protocol UIScrollViewDelegate&lt;NSObject&gt;</span><br><span class="line">@optional</span><br><span class="line">- (void)scrollViewDidScroll:(UIScrollView *)scrollView; </span><br><span class="line">// any offset changes 只要scrollView的content 这个方法在任何方式触发 contentOffset </span><br><span class="line">// 变化的时候都会被调用（包括用户拖动，减速过程，直接通过代码设置等），可以用于监控 contentOffset </span><br><span class="line">// 的变化，并根据当前的 contentOffset 对其他 view 做出随动调整。</span><br><span class="line"></span><br><span class="line">// called on start of dragging (may require some time and or distance to move)</span><br><span class="line">- (void)scrollViewWillBeginDragging:(UIScrollView *)scrollView; </span><br><span class="line">// 用户开始拖动 scroll view 的时候被调用，可能需要一些时间和距离移动之后才会触发。</span><br><span class="line"></span><br><span class="line">// called on finger up if the user dragged. velocity is in points/millisecond. </span><br><span class="line">// targetContentOffset may be changed to adjust where the scroll view comes to rest</span><br><span class="line">- (void)scrollViewWillEndDragging:(UIScrollView *)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(inout CGPoint *)targetContentOffset NS_AVAILABLE_IOS(5_0);</span><br><span class="line">// 在 didEndDragging 前被调用，当 willEndDragging 方法中 velocity 为 CGPointZero</span><br><span class="line">//（结束拖动时两个方向都没有速度）时，didEndDragging 中的 decelerate 为 NO，即没有减速过程，</span><br><span class="line">//willBeginDecelerating 和 didEndDecelerating 也就不会被调用。反之，</span><br><span class="line">// 当 velocity 不为 CGPointZero 时，scroll view 会以 velocity 为初速度，</span><br><span class="line">// 减速直到 targetContentOffset。</span><br><span class="line"></span><br><span class="line">- (void)scrollViewDidEndDragging:(UIScrollView *)scrollView willDecelerate:(BOOL)decelerate;</span><br><span class="line">// 在用户结束拖动后被调用，decelerate 为 YES 时，</span><br><span class="line">// 结束拖动后会有减速过程。注，在 didEndDragging 之后，如果有减速过程，</span><br><span class="line">// scroll view 的 dragging 并不会立即置为 NO，而是要等到减速结束之后，</span><br><span class="line">// 所以这个 dragging 属性的实际语义更接近 scrolling。</span><br><span class="line"></span><br><span class="line">- (void)scrollViewWillBeginDecelerating:(UIScrollView *)scrollView;   // 减速动画开始前被调用。</span><br><span class="line"></span><br><span class="line">- (void)scrollViewDidEndDecelerating:(UIScrollView *)scrollView;      </span><br><span class="line">// 减速动画结束时被调用，这里有一种特殊情况：当一次减速动画尚未结束的时候再次 drag scroll view，</span><br><span class="line">// didEndDecelerating 不会被调用，并且这时 scroll view 的 dragging 和 decelerating 属性都是 YES。</span><br><span class="line">// 新的 dragging 如果有加速度，那么 willBeginDecelerating 会再一次被调用，然后才是 didEndDecelerating；</span><br><span class="line">// 如果没有加速度，虽然 willBeginDecelerating 不会被调用，但前一次留下的 didEndDecelerating 会被调用      </span><br><span class="line"></span><br><span class="line">- (void)scrollViewDidEndScrollingAnimation:(UIScrollView *)scrollView; </span><br><span class="line">// called when setContentOffset/scrollRectVisible:animated: finishes. not called if not animating</span><br><span class="line"></span><br><span class="line">- (void)scrollViewDidZoom:(UIScrollView *)scrollView NS_AVAILABLE_IOS(3_2); </span><br><span class="line">// any zoom scale changes view缩放改变的时候调用。</span><br><span class="line"></span><br><span class="line">- (nullable UIView *)viewForZoomingInScrollView:(UIScrollView *)scrollView;     </span><br><span class="line">// return a view that will be scaled. if delegate returns nil, nothing happens</span><br><span class="line">告诉代理要缩放那个控件。 </span><br><span class="line"></span><br><span class="line">- (void)scrollViewWillBeginZooming:(UIScrollView *)scrollView withView:(nullable UIView *)view NS_AVAILABLE_IOS(3_2); </span><br><span class="line">// called before the scroll view begins zooming its content缩放开始的时候调用</span><br><span class="line"></span><br><span class="line">- (void)scrollViewDidEndZooming:(UIScrollView *)scrollView withView:(nullable UIView *)view atScale:(CGFloat)scale; </span><br><span class="line">// scale between minimum and maximum. called after any &apos;bounce&apos; animations缩放完毕的时候调用。</span><br><span class="line"></span><br><span class="line">- (BOOL)scrollViewShouldScrollToTop:(UIScrollView *)scrollView;   // return a yes if you want to scroll to the top. if not defined, assumes YES- (void)scrollViewDidScrollToTop:(UIScrollView *)scrollView;      </span><br><span class="line">// called when scrolling animation finished. may be called immediately if already at top滚动动画完成时调用。</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> Tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Objective-C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS UILabel的lineBreakMode省略模式设置</title>
      <link href="/ios-uilabel-linebreakmode-setting/"/>
      <url>/ios-uilabel-linebreakmode-setting/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">label.lineBreakMode = NSLineBreakByCharWrapping; //以字符为显示单位显示，后面部分省略不显示。</span><br><span class="line">label.lineBreakMode = NSLineBreakByClipping; //剪切与文本宽度相同的内容长度，后半部分被删除。</span><br><span class="line">label.lineBreakMode = NSLineBreakByTruncatingHead; //前面部分文字以……方式省略，显示尾部文字内容。</span><br><span class="line">label.lineBreakMode = NSLineBreakByTruncatingMiddle; //中间的内容以……方式省略，显示头尾的文字内容。</span><br><span class="line">label.lineBreakMode = NSLineBreakByTruncatingTail; //结尾部分的内容以……方式省略，显示头的文字内容。</span><br><span class="line">label.lineBreakMode = NSLineBreakByWordWrapping; //以单词为显示单位显示，后面部分省略不显示。</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> Tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Objective-C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS修改UIImage图片尺寸大小逻辑分辨率</title>
      <link href="/ios-uiimage-resize/"/>
      <url>/ios-uiimage-resize/</url>
      
        <content type="html"><![CDATA[<p>之前遇到的问题，给UITabbar item设置图片，然而素材的图片分辨率是87*87，填满了整个tabbar item的区域，很难看，又要考虑适配XS Max的三倍问题。 解决方法如下： 通过设置scale使生成的图片尺寸是逻辑分辨率pt单位，不用操心二倍三倍的问题。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+ (UIImage *)imageResize:(UIImage*)img andResizeTo:(CGSize)newSize &#123;</span><br><span class="line">    CGFloat scale = [[UIScreen mainScreen]scale];</span><br><span class="line">    //UIGraphicsBeginImageContext(newSize);</span><br><span class="line">    UIGraphicsBeginImageContextWithOptions(newSize, NO, scale);</span><br><span class="line">    [img drawInRect:CGRectMake(0,0,newSize.width,newSize.height)];</span><br><span class="line">    UIImage* newImage = UIGraphicsGetImageFromCurrentImageContext();</span><br><span class="line">    UIGraphicsEndImageContext();</span><br><span class="line">    return newImage;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样一来就能使tabbar item的图标始终是25pt*25pt，恰到好处。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">childController.tabBarItem.selectedImage = [[SmallTools imageResize:[UIImage imageNamed:selected] andResizeTo:CGSizeMake(25, 25)] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/1549072293345_888x213.gif" alt></p><h3 id="另外关于上图中间图标的动画效果实现可参考此文章"><a href="#另外关于上图中间图标的动画效果实现可参考此文章" class="headerlink" title="另外关于上图中间图标的动画效果实现可参考此文章"></a>另外关于上图中间图标的动画效果实现可参考此文章</h3><p><a href="http://paaatrick.com/ios_uitabbar_touch_animation.html" title="iOS UITabbar图标点击动画效果实现" target="_blank" rel="noopener">iOS UITabbar图标点击动画效果实现</a>      </p><hr>]]></content>
      
      
      <categories>
          
          <category> Tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Objective-C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS UITabbar图标点击动画效果实现</title>
      <link href="/ios-uitabbar-touch-animation/"/>
      <url>/ios-uitabbar-touch-animation/</url>
      
        <content type="html"><![CDATA[<p>正常情况下，我们点击tabbar都只有一个变色效果，但有时候，如果我们想给它添加一个点击动画，该如何做呢？ 以下是两种方法： 第一种通过<code>tabBar: didSelectItem:</code>代理方法接收每次点击的item，对每个item都绑定动画效果，弊端是获取到的是整个item，图标和标题都会一起动。 第二种是自定一个方法单独获取tabbar item的image和label，可自定只对某个item绑定动画，并且可设定单独image的动画。 先上几个效果图：</p><p>1、带重力效果的弹跳（第二种方法：只对image执行动画） </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/1549072293345_888x213.gif" alt></p><a id="more"></a><p>2、先放大，再缩小 </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/511196-20170116103844396-1872210226.gif" alt></p><p>3、Z轴旋转 </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/511196-20170116103932614-876709799.gif" alt></p><p>4、Y轴位移 </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/511196-20170116104000302-95725194.gif" alt></p><p>5、放大并保持 </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/511196-20170116104036224-920525159.gif" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">@interface MainTabbarVC ()&lt;UITabBarControllerDelegate&gt;</span><br><span class="line">@property (nonatomic,assign) NSInteger  indexFlag;　　//记录上一次点击tabbar，使用时，记得先在init或viewDidLoad里 初始化 = 0</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">//第一种方法：通过接收点击事件对每个tabbar item的点击都执行动画</span><br><span class="line">-(void)tabBar:(UITabBar *)tabBar didSelectItem:(UITabBarItem *)item&#123;</span><br><span class="line">    NSInteger index = [self.tabBar.items indexOfObject:item];</span><br><span class="line">    if (index != self.indexFlag) &#123;</span><br><span class="line">        //执行动画</span><br><span class="line">        NSMutableArray *arry = [NSMutableArray array];</span><br><span class="line">        for (UIView *btn in self.tabBar.subviews) &#123;</span><br><span class="line">            if ([btn isKindOfClass:NSClassFromString(@&quot;UITabBarButton&quot;)]) &#123;</span><br><span class="line">                 [arry addObject:btn];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //添加动画</span><br><span class="line">　　　　 //---将下面的代码块拷贝到此并修改最后一行addAnimation的layer对象即可---</span><br><span class="line"></span><br><span class="line">        self.indexFlag = index;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//第二种方法：只想对某一个item的点击执行动画，且只有图片动，文字不动。并且其余图标的点击不带动画</span><br><span class="line">- (void)tabBarImageAnimation &#123;</span><br><span class="line">    for (UIControl *tabBarButton in self.tabBar.subviews) &#123;</span><br><span class="line">        if ([tabBarButton isKindOfClass:NSClassFromString(@&quot;UITabBarButton&quot;)]) &#123;</span><br><span class="line">            for (UIControl *tabBarButtonLabel in tabBarButton.subviews) &#123;</span><br><span class="line">                if ([tabBarButtonLabel isKindOfClass:NSClassFromString(@&quot;UITabBarButtonLabel&quot;)]) &#123;</span><br><span class="line">                    UILabel *label = (UILabel *)tabBarButtonLabel;</span><br><span class="line">                    //&quot;tab1&quot;到&quot;tab4&quot;分别是不打算执行动画的tabbar item的标题名称</span><br><span class="line">                    if (![label.text isEqualToString:@&quot;tab1&quot;] &amp;&amp; ![label.text isEqualToString:@&quot;tab2&quot;] &amp;&amp; ![label.text isEqualToString:@&quot;tab3&quot;] &amp;&amp; ![label.text isEqualToString:@&quot;tab4&quot;]) &#123;</span><br><span class="line">                        for (UIView *imageView in tabBarButton.subviews) &#123;</span><br><span class="line">                            if ([imageView isKindOfClass:NSClassFromString(@&quot;UITabBarSwappableImageView&quot;)]) &#123;</span><br><span class="line">                                //添加动画</span><br><span class="line">                                //---将下面的代码块拷贝到此并修改最后一行addAnimation的layer对象即可---</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、带重力效果的弹跳</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CAKeyframeAnimation *animation = [CAKeyframeAnimation animationWithKeyPath:@&quot;transform.translation.y&quot;];</span><br><span class="line">//通过初中物理重力公式计算出的位移y值数组</span><br><span class="line">animation.values = @[@0.0, @-4.15, @-7.26, @-9.34, @-10.37, @-9.34, @-7.26, @-4.15, @0.0, @2.0, @-2.9, @-4.94, @-6.11, @-6.42, @-5.86, @-4.44, @-2.16, @0.0];</span><br><span class="line">animation.duration = 0.8;</span><br><span class="line">animation.beginTime = CACurrentMediaTime() + 1;</span><br><span class="line">[imageView.layer addAnimation:animation forKey:nil];</span><br></pre></td></tr></table></figure><p>2、先放大，再缩小</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//放大效果，并回到原位</span><br><span class="line">CABasicAnimation *animation = [CABasicAnimation animationWithKeyPath:@&quot;transform.scale&quot;];</span><br><span class="line">//速度控制函数，控制动画运行的节奏</span><br><span class="line">animation.timingFunction = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseInEaseOut];</span><br><span class="line">animation.duration = 0.2;       //执行时间</span><br><span class="line">animation.repeatCount = 1;      //执行次数</span><br><span class="line">animation.autoreverses = YES;    //完成动画后会回到执行动画之前的状态</span><br><span class="line">animation.fromValue = [NSNumber numberWithFloat:0.7];   //初始伸缩倍数</span><br><span class="line">animation.toValue = [NSNumber numberWithFloat:1.3];     //结束伸缩倍数</span><br><span class="line">[[arry[index] layer] addAnimation:animation forKey:nil];</span><br></pre></td></tr></table></figure><p>3、Z轴旋转</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//z轴旋转180度</span><br><span class="line">CABasicAnimation *animation = [CABasicAnimation animationWithKeyPath:@&quot;transform.rotation.z&quot;];</span><br><span class="line">//速度控制函数，控制动画运行的节奏</span><br><span class="line">animation.timingFunction = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseInEaseOut];</span><br><span class="line">animation.duration = 0.2;       //执行时间</span><br><span class="line">animation.repeatCount = 1;      //执行次数</span><br><span class="line">animation.removedOnCompletion = YES;</span><br><span class="line">animation.fromValue = [NSNumber numberWithFloat:0];   //初始伸缩倍数</span><br><span class="line">animation.toValue = [NSNumber numberWithFloat:M_PI];     //结束伸缩倍数</span><br><span class="line">[[arry[index] layer] addAnimation:animation forKey:nil];</span><br></pre></td></tr></table></figure><p>4、Y轴位移</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//向上移动</span><br><span class="line">CABasicAnimation *animation = [CABasicAnimation animationWithKeyPath:@&quot;transform.translation.y&quot;];</span><br><span class="line">//速度控制函数，控制动画运行的节奏</span><br><span class="line">animation.timingFunction = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseInEaseOut];</span><br><span class="line">animation.duration = 0.2;       //执行时间</span><br><span class="line">animation.repeatCount = 1;      //执行次数</span><br><span class="line">animation.removedOnCompletion = YES;</span><br><span class="line">animation.fromValue = [NSNumber numberWithFloat:0];   //初始伸缩倍数</span><br><span class="line">animation.toValue = [NSNumber numberWithFloat:-10];     //结束伸缩倍数</span><br><span class="line">[[arry[index] layer] addAnimation:animation forKey:nil];</span><br></pre></td></tr></table></figure><p>5、放大并保持</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//放大效果</span><br><span class="line">CABasicAnimation *animation = [CABasicAnimation animationWithKeyPath:@&quot;transform.scale&quot;];</span><br><span class="line">//速度控制函数，控制动画运行的节奏</span><br><span class="line">animation.timingFunction = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseInEaseOut];</span><br><span class="line">animation.duration = 0.2;       //执行时间</span><br><span class="line">animation.repeatCount = 1;      //执行次数</span><br><span class="line">animation.removedOnCompletion = NO;</span><br><span class="line">animation.fillMode = kCAFillModeForwards;           //保证动画效果延续</span><br><span class="line">animation.fromValue = [NSNumber numberWithFloat:1.0];   //初始伸缩倍数</span><br><span class="line">animation.toValue = [NSNumber numberWithFloat:1.15];     //结束伸缩倍数</span><br><span class="line">[[arry[index] layer] addAnimation:animation forKey:nil];</span><br><span class="line">//移除其他tabbar的动画</span><br><span class="line">for (int i = 0; i&lt;arry.count; i++) &#123;</span><br><span class="line">    if (i != index) &#123;</span><br><span class="line">        [[arry[i] layer] removeAllAnimations];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此外，如果想定制其他动画效果，还可以从下面属性里自己定制动画 </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/511196-20170116093610724-1578979553.png" alt></p><hr>]]></content>
      
      
      <categories>
          
          <category> Tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Objective-C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>比咪蒙更可怕的，是挖祖坟式举报清算</title>
      <link href="/raistlin2017-201901201/"/>
      <url>/raistlin2017-201901201/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文始发于微信公众号（为你写一个故事）：<a href="http://mp.weixin.qq.com/s/Xb4bgA_2ylXRwQO4isgJqg" target="_blank" rel="noopener">比咪蒙更可怕的，是挖祖坟式举报清算</a></p></blockquote><p>因为旗下账号“才华有限青年”一篇自称“非虚构“的文章，咪蒙又被推上风口浪尖。  </p><a id="more"></a><p>就事论事的说，才华有限青年其实和咪蒙关系不大，那确实是个相对独立的团队，我也读过他们以前很多文章，很多都挺好看，要说有什么错，最多是有点煽动情绪。  </p><p>但是做媒体嘛，又有几个不煽动情绪呢，只要不造谣，不引导邪恶的价值观，就没啥问题。  </p><p>所以我觉得一个好的方式是，你不同意她的一篇文章，就说这篇文章写得不好写得不对，甚至可以说这篇文章写得用心险恶。  </p><p>但你去挖她的出身，说她以前是咪蒙的实习生，所以一定不是什么好人。  </p><p>就有点恶毒了。  </p><p>比如有一位我挺喜欢的媒体人，这样写，我就觉得恶毒了  </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/4-1548951367.png" alt="比咪蒙更可怕的，是挖祖坟式举报清算"></p><p>（而且如果真的翻了照片的话，较真的说这句话是造谣）  </p><p>还有昨天整个朋友圈轰轰烈烈的”含咪量“测试，很多人号称朋友圈只要有人关注咪蒙了，就要和TA互删。  </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/1-1548951367.jpeg" alt="比咪蒙更可怕的，是挖祖坟式举报清算"></p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/9-1548951368.jpeg" alt="比咪蒙更可怕的，是挖祖坟式举报清算"><br>这我也觉得太过。<br>按照他们的意思，也别管这人是谁，和他们是什么关系，是不是好朋友或者亲戚，也不管这个人关注咪蒙究竟是认同咪蒙的价值观还是就想围观一下或者学习排版，只要关注咪蒙，就要互删。<br>这放在几十年前，我们叫做”划清界限“，流行这种运动的十年，是新中国最混乱的十年。<br>当然我觉得更过的，还是下面这张截图。  </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/1-1548951370.jpeg" alt="比咪蒙更可怕的，是挖祖坟式举报清算"></p><p>咪蒙一边说这话，一边”永远爱国，永远热泪盈眶“恶不恶心？<br>恶心。  </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/1-1548951372.jpeg" alt="比咪蒙更可怕的，是挖祖坟式举报清算"><br>咪蒙式毒鸡汤讨不讨厌？  </p><p>我也讨厌。<br>但这样挖祖坟式清算举报，尤其是一直翻到2013年的微博，然后把相关机构全都@一遍的行为，让我感到很不舒服。<br>这种不舒服不是反感，而是感到恐怖。<br>而且这样的事情，这些年越来越多了。<br>这样的待遇，陈一发遭遇过：  </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/9-1548951373.jpeg" alt="比咪蒙更可怕的，是挖祖坟式举报清算"></p><p>罗永浩遭遇过：  </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/0-1548951373.jpeg" alt="比咪蒙更可怕的，是挖祖坟式举报清算"></p><p>毕福剑也遭遇过：  </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/4-1548951374.png" alt="比咪蒙更可怕的，是挖祖坟式举报清算"></p><p>普通网友当然也遭遇过：  </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/8-1548951375.jpeg" alt="比咪蒙更可怕的，是挖祖坟式举报清算"></p><p>动不动就呼吁封杀，虎扑和吴亦凡粉丝战斗时，双方都遭遇过。</p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/3-1548951377.jpeg" alt="比咪蒙更可怕的，是挖祖坟式举报清算"></p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/4-1548951379.jpeg" alt="比咪蒙更可怕的，是挖祖坟式举报清算"></p><p>游戏《阴阳师》遭遇过：</p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/8-1548951380.jpg" alt="比咪蒙更可怕的，是挖祖坟式举报清算"></p><p>明星骂战的时候使用过这种武器。  </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/10-1548951381.jpeg" alt="比咪蒙更可怕的，是挖祖坟式举报清算"></p><p>社会热点事件就不说了，总是有成千上万人向团团举报。  </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/1-1548951383.jpg" alt="比咪蒙更可怕的，是挖祖坟式举报清算"></p><p>现在甚至王者荣耀玩得不爽了，也要举报。  </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/3-1548951383.jpg" alt="比咪蒙更可怕的，是挖祖坟式举报清算"></p><p>在这些举报里，网友们用不知道从哪里学到的词汇，给自己看着不爽的人扣上一个又一个大帽子，套上一个又一个罪名，其手法之纯熟，让我一度以为生活在冯骥才的《一百个人的十年》里。</p><p>可惜拿起手机瞧一瞧，发现已经是2019年了。</p><p>在我看来这种行为和看到让自己不爽的综艺，歌曲，电影就呼吁封杀是一样的，都是分不清各种权利界限的表现。就像几百年前，被人欺负了，就去衙门一跪，高喊“大人，我冤啊！”，然后期待青天大老爷给自己做主的古代中国人一样，始终没有长大。</p><p>他们自己是巨婴，却以为我国居民全都是长不大的巨婴，需要妈妈无微不至地照顾我们，帮我们挑好哪些是我们该看的，哪些是我们不该看的，然后只要他们看到自己不爽的，就会像孩子一样哭喊着叫妈妈来，希望妈妈把“坏东西”都打飞，然后才会重新喜笑颜开。</p><p>可惜现代法制社会没有，也不应该有青天大老爷——历史早已经证明了，青天大老爷式的人治，远不如法治来得公平高效，青天大老爷十年一遇，但手握权力，肆意滥用的昏官却遍地都是。  </p><p>这已经很魔幻了。</p><p>但更魔幻的是，这些诉求，有时候还真的会得到回应。</p><p>以前我觉得孩子长不大，站不起来，是因为孩子自己笨，不想长大，后来才明白，孩子长不大，多半是有一个什么都替孩子做主，什么都替孩子决定的妈——在这些挖坟举报真的会得到回应的情况下，这样的行为永远不会停止，只会变本加厉。</p><p>即使如此，我还是希望你们能少挖坟，少呼吁封杀。</p><p>因为“封杀”这个词代表的那个行为，本来就不应该存在于这个世界上，并且当你习惯”封杀“之后，迟早有一天，会降临到你喜欢的那个账号，那个主播或者那个明星身上。</p><p>还记得之前整治八卦的时候吗？  </p><p>一开始封的很多账号，大家都讨厌，所以一片叫好声。结果之后发展到只要账号中带”八卦“两个字的，都被封号了，包括大家爱看的”毒舌电影“，”严肃八卦“，”金融八卦女“也全部都凉了。</p><p>最搞笑的是，我有个朋友，做了个账号叫”财经八卦阵“，那段时间只能改成”财经九卦阵“，终于躲过一劫。</p><p>还记得之前讨厌PGONE的人拼命举报PGONE，@了一大堆官方账号，要求对PGONE进行封杀吗？</p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/4-1548951384.png" alt="比咪蒙更可怕的，是挖祖坟式举报清算"></p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/3-1548951385.png" alt="比咪蒙更可怕的，是挖祖坟式举报清算"></p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/0-1548951385.png" alt="比咪蒙更可怕的，是挖祖坟式举报清算"></p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/1-1548951386.png" alt="比咪蒙更可怕的，是挖祖坟式举报清算"></p><p>那会儿恰好GAI求婚成功，所以当时这些人中，有不少都人是通过捧GAI来踩PGONE的。</p><p>我自己也是GAI的粉丝，在一个GAI的粉丝群里，有几个姐们表示太好了，解气。但随即更多人表示这不是好事，因为GAI也有黑历史。</p><p>果然过了没多久，GAI被迫从《歌手》中退赛，至今也没在电视上再看过他。</p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/0-1548951386.jpeg" alt="比咪蒙更可怕的，是挖祖坟式举报清算"></p><p>在这样轰轰烈烈的挖坟式举报运动中，暴走漫画凉了，陈一发凉了，卢本伟凉了，毕福剑凉了，很多歌手明星都凉了。</p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/0-1548951387.jpg" alt="比咪蒙更可怕的，是挖祖坟式举报清算"></p><p><strong>PGONE被封杀你们叫好，GAI被封杀你们喊冤，毕福剑从央视消失你们想念他。你们以为这几件事不一样应该分开，但经历过这么多事情，你们应该明白，这两件事其实根本就是一件事。</strong>  </p><p>封杀的人不会管哪个嘻哈歌手是正能量的，哪个是屡教不改的——既然嘻哈有问题，那就有问题的一起下。</p><p>就像现在这些为咪蒙的倒台拍手叫好的自媒体人，你又知道封杀的人分得清你和咪蒙的区别咯？</p><p>况且在我看来，很多账号根本就和咪蒙没区别。</p><p>比如某个自媒体，洋洋洒洒写了几千字，细数咪蒙的”七宗罪“。</p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/8-1548951388.jpeg" alt="比咪蒙更可怕的，是挖祖坟式举报清算"></p><p>最后得出的结论是，咪蒙最大的罪就是她在迎合读者，并且标题低俗，危害极大。他把文章发到500人的新媒体群里，希望大家为他鼓掌叫好。</p><p>结果翻开他自己的公众号，标题却是这个画风的。</p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/1-1548951390.jpeg" alt="比咪蒙更可怕的，是挖祖坟式举报清算"></p><p>当有人在群里质问他，这是不是在迎合读者，标题低俗，危害极大的时候，他很坦诚的承认”可我的没人看啊。“</p><p>让人心慌。</p><p>一个事实是，我们说的法制说的正义，从来不是给我们喜欢的东西准备的，我们喜欢的东西，根本不需要心中的那杆称来保护。  </p><p>我们说的正义和法制，是你们讨厌的人，也有说话的权利，如果他们没有违法，就不应该不让他们说话。</p><p>还有一个事实是，咪蒙的价值观确实有问题，也许能煽动几十万人的情绪，是会让人焦虑，但真要说她改变了多少人三观，我觉得各位是高看文字的力量了。</p><p>一方面咪蒙并不产生三观，她一般只迎合大众情绪，另一方面三观这东西是没那么容易改变的，2019年了，文字早就没那么大力量了，现在如果说谁因为一篇文章三观就变了，那说明TA本来就有这样的想法，只是这篇文章正好支持了TA而已。</p><p>比起咪蒙，我更害怕那样因为讨厌一个人，就肆无忌惮地爆粗口，就想着要弄死对方，更害怕那样挖祖坟式的举报。</p><p>因为这让我觉得自己每时每刻都活在监视中，终日不得安宁。</p><p>现在你们觉得应该这样对付咪蒙，谁知道哪天我会不会受到这样的待遇。</p><p>而且说一千道一万，当年咪蒙写那几篇文章，疯狂在朋友圈转发刷屏，把咪蒙一度捧成微信第一大号的，还不是网友吗？</p><p>看到某个去年还把咪蒙请为座上宾，一口一个咪蒙老师做分享的机构，昨天他们主编也开始测含咪率了，可能下一步就要表态”互删“了。</p><p>看到之前分享过致贱人几篇的人，开始在朋友圈说”想不通为什么这么多人会关注咪蒙“了。</p><p>有时候见多了这种昨天还万人追捧，今天就过街老鼠的戏码。真是让人对这个复杂繁复的世界，又害怕了几分呢。</p><p>-END-</p>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>亲测真正好用的WordPress媒体库图片分类插件</title>
      <link href="/wp-real-media-library/"/>
      <url>/wp-real-media-library/</url>
      
        <content type="html"><![CDATA[<p>WordPress有个很大的问题就是管理上传图片的媒体库很菜，连最基本的文件夹分类功能都没有。 网上找了好一会儿，最开始找到一个 Attachment Taxonomies 看介绍好像还可以</p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/Screenshot-2019-01-31-18.12.21.png" alt></p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/Screenshot-2019-01-31-18.12.51.png" alt></p><p>然而实际使用起来极不方便，上传图片时不能选择上传到哪个分类，现有的图片也不能多选设置分类，需要点开每一张图片再勾选分类。 然后找到一个 WP Real Media Library 度娘盘找到了资源，下载后在WordPress插件界面上传使用。 </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/Screenshot-2019-01-31-18.01.56.png" alt></p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/Screenshot-2019-01-31-18.13.26.png" alt></p><p>使用起来非常顺手。</p><h3 id="下载链接"><a href="#下载链接" class="headerlink" title="下载链接"></a><a href="http://www.4mudi.com/themes/wp-real-media-library/#toggle-id-2" title="下载链接" target="_blank" rel="noopener">下载链接</a></h3><h3 id="V4-0-10-度盘链接"><a href="#V4-0-10-度盘链接" class="headerlink" title="V4.0.10 度盘链接"></a><a href="https://pan.baidu.com/s/1W5AYA0jVPFWZwZMmHMYd4w" title="V4.0.10 度盘链接" target="_blank" rel="noopener">V4.0.10 度盘链接</a></h3>]]></content>
      
      
      <categories>
          
          <category> Tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WordPress </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云服务器使用WordPress搭建个人博客并绑定域名全记录</title>
      <link href="/build-wordpress-blog/"/>
      <url>/build-wordpress-blog/</url>
      
        <content type="html"><![CDATA[<p>一直在续费云服务器，索性充分利用资源，复古一下，鼓捣个小博客记录些东西。 现在大致已经搭好博客了，那就先把这折腾了一整天的建站过程给记录下。</p><h3 id="关于服务器"><a href="#关于服务器" class="headerlink" title="关于服务器"></a><strong>关于服务器</strong></h3><p>前几年购入的Vultr的ECS，东京的相对性价比高一些，延迟和网速都很稳，现在（2019.1）还有3.5刀一个月的，非常实惠。</p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/Screenshot-2019-01-29-18.26.19.png" alt> </p><a id="more"></a><h4 id="安装-Apache2、MySQL、PHP"><a href="#安装-Apache2、MySQL、PHP" class="headerlink" title="安装 Apache2、MySQL、PHP"></a><strong>安装 Apache2、MySQL、PHP</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install apache2</span><br><span class="line">sudo apt-get install mysql-server mysql-client</span><br></pre></td></tr></table></figure><p>测试一下Apache2是否成功安装：浏览器访问云服务器的IP，安装成功的话会显示Apache2的默认页面，It works。   安装php7.0，并安装apache的php扩展，再安装整合mysql和php的工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install php7.0</span><br><span class="line">sudo apt-get install libapache2-mod-php7.0</span><br><span class="line">sudo apt-get install php7.0-mysql</span><br></pre></td></tr></table></figure><p>重启一下Apache2和MySQL</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo service apache2 restart</span><br><span class="line">sudo service mysql restart</span><br></pre></td></tr></table></figure><p>安装 phpmyadmin 这是一个以PHP为基础，以Web-Base方式架构在网站主机上的MySQL的数据库管理工具。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install phpmyadmin</span><br></pre></td></tr></table></figure><p>开启 apache 的 mod_rewrite，再重启一次apache</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo a2enmod rewrite</span><br><span class="line">sudo service apache2 restart</span><br></pre></td></tr></table></figure><p>先登录mysql <code>mysql -u root -p</code> ，输入密码 首先创建名为“wordpressdb”数据库，然后查看创建的数据库是否成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">create database wordpressdb;</span><br><span class="line">show databases;</span><br></pre></td></tr></table></figure><p>看到图中出现自己创建的数据库。</p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/20180318165221370.png" alt>  </p><p>给用户服务权限，下面的wordpressuser改为安装mysql时自己输入的用户名。</p><p>GRANT ALL PRIVILEGES ON wordpressdb.* TO wordpressuser@localhost;<br>FLUSH PRIVILEGES;</p><p>  输入 <code>exit;</code>退出mysql，并再次重启服务。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo service apache2 restart</span><br><span class="line">sudo service mysql restart</span><br></pre></td></tr></table></figure><h4 id="下载并配置WordPress"><a href="#下载并配置WordPress" class="headerlink" title="下载并配置WordPress"></a><strong>下载并配置WordPress</strong></h4><p>用wget从WordPress官方网站下载安装包，放在 /var/www/html/ 目录，然后解压。 （最新版下载链接在 <a href="https://cn.wordpress.org/download/" target="_blank" rel="noopener">https://cn.wordpress.org/download/</a> 里面有）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/www/html/</span><br><span class="line">sudo wget https://cn.wordpress.org/wordpress-5.0.3-zh_CN.zip</span><br><span class="line">sudo tar zxf wordpress-4.9.4.tar.gz</span><br></pre></td></tr></table></figure><p>  在 /var/www/html/wordpress/wp-content/ 下创建uploads。 然后更改上传目录权限，不然之后博客上传不了图片。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir uploads</span><br><span class="line">sudo chown -R www-data /var/www/html/wordpress</span><br><span class="line">sudo chmod -R 755 /var/www/html/wordpress</span><br><span class="line">sudo chown -R :www-data /var/www/html/wordpress/wp-content/uploads</span><br></pre></td></tr></table></figure><p>  配置wp-config-sample.php ，该文件在/var/www/html/wordpress/下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi wp-config-sample.php</span><br></pre></td></tr></table></figure><p>修改方法如下图所示：</p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/20180318182134757.png" alt></p><p>浏览器访问  http://服务器IP地址/wordpress ，如果安装正常则进入wordpress的安装界面。 安装好后的效果如图： </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/20180318182550961.png" alt></p><p>到此建站完成。接下来申请域名并绑定服务器。</p><h3 id="申请域名并配置DNS"><a href="#申请域名并配置DNS" class="headerlink" title="申请域名并配置DNS"></a><strong>申请域名并配置DNS</strong></h3><p>通过比价网站可以先大致看一下想要的域名价格 <a href="https://www.domcomp.com/" target="_blank" rel="noopener">https://www.domcomp.com/</a></p><p>看了一下知乎，大家推荐的域名供应商有 NameSilo 、Namecheap、Porkbun、GoDaddy等，亲测了一遍，发现 NameSilo 用户界面太丑；Namecheap 实际并不 cheap；最多人说的 GoDaddy 也偏贵但是支持支付宝，Porkbun 性价比高而且界面友好。 因为有境外支付的信用卡就不考虑 GoDaddy 了，直接在 Porkbun 上下单了一个 .com 域名，首年不到 7刀，续费 8.7刀。 </p><p>值得一提的是支付时好几张卡支付失败，建行、农行都不行，换了广发的万事达才支付成功，有点迷。 付款后主页可以看到自己域名的各种详情，然后要设置的是 DNS RECORDS </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/Screenshot-2019-01-29-17.48.31.png" alt></p><p>点击Edit，添加两个A记录，分别是带www和不带的域名，ANSWER填自己的主机地址。 </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/Screenshot-2019-01-29-17.50.38.png" alt></p><p>两个NS填DNS提供商的，这里因为Vultr自带了免费的DNS服务，直接填上去即可，具体的DNS地址可在Vultr的设置页里找。 下图就是设置页，可以看到底下有两条DNS地址，填到 Porkbun 里，然后还要在 Vultr 里 Add Domain，绑定服务器到域名。 </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/Screenshot-2019-01-29-17.52.20.png" alt></p><p>两边都操作完成后，静候几分钟，然后访问一下自己的域名，应该就出来了。</p><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a><strong>常见问题</strong></h3><h4 id="在仪表盘的设置中不小心更改了wordpress地址后回不到后台"><a href="#在仪表盘的设置中不小心更改了wordpress地址后回不到后台" class="headerlink" title="在仪表盘的设置中不小心更改了wordpress地址后回不到后台"></a><strong>在仪表盘的设置中不小心更改了wordpress地址后回不到后台</strong></h4><p>在建站过程中，如果改动了 wordpress地址或站点地址，就回不到后台了。 </p><p>解决方法：网站首页在wordpress目录下的index.php中的require这行的内容。 </p><p>下图是wordpress下index.php的require所在行的内容。 </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/20180319090603947.png" alt></p><p>最开始wordpress url是： 主机ip/wordpress。 它会自动去找index.php，然后就通过index.php里面的内容加载wordpress环境，更改了url后，就不能自动去找index.php了。此时后台也无法登录。解决这个问题，直接进数据库修改相关数据即可。操作如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p //然后输入密码</span><br><span class="line">show databases; //显示所有数据库</span><br><span class="line">use wordpressdb; //选中你自己网站对应的数据库。</span><br><span class="line">show tables; //显示该数据库所有表格。</span><br><span class="line">select * from wp_options where 1=1 limit 10; //查看数据库前10条记录</span><br><span class="line">update wp\_options set option\_value=&apos;http://服务器ip（或域名）/wordpress&apos; where option_name=&apos;siteurl&apos;;//（如果home也改了就也改回来）</span><br><span class="line">update wp\_options set option\_value=&apos;http://服务器ip（或域名）/wordpress&apos; where option_name=&apos;home&apos;;</span><br></pre></td></tr></table></figure><p>其实就是改变了wordpress url ，则wp_options表中的siteurl的值变化了，只要把它在修改过来就行。</p><h4 id="使用服务器IP（或域名）根地址直接访问网站首页"><a href="#使用服务器IP（或域名）根地址直接访问网站首页" class="headerlink" title="使用服务器IP（或域名）根地址直接访问网站首页"></a><strong>使用服务器IP（或域名）根地址直接访问网站首页</strong></h4><p>此文章的建站方法是把所有东西都放在wordpress目录下，因此建完后，访问网站的网址为：主机IP/wordpresss。</p><p>通常情况下，我们会买一个域名与云主机IP绑定，输入IP地址只能访问根目录。 即/var/www/html，但是无法访问其下面的子目录。</p><p>以下将给出解决方案。如果使主机IP直接定位到网站首页。</p><p>第一种解决方式是把wordpress的内容直接都弄到根目录中，这是不提倡的，会使根目录变得杂乱。通常推荐第二种方案。   </p><p>第二种方案操作如下： 登录后台，打开 设置→常规，修改站点地址。 </p><p>WordPress地址是本体存放的地址，按本文安装的话就不用改动了。 站点地址是浏览器访问的地址，改为 “http://服务器IP（或域名）” 的形式，如下图即可。 </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/Screenshot-2019-01-31-15.26.26.png" alt></p><p>同时，打开 设置→固定链接，把固定链接修改成如下形式：（去掉中间的/wordpress/） </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/Screenshot-2019-01-29-17.14.42.png" alt></p><p>至于文章后缀名，网上有关WordPress永久链接设置的介绍众多，普遍认为 <code>/%postname%.html</code> 是最佳的自定义永久链接形式。</p><p>这种形式将显示为:http://你的域名/日志标题.html，简单明了，有利于SEO。但当你的日志标题是中文时，文章标题以中文形式出现，看上去很不符合标准，或者可能会出现如:%64%b3%e8%ae%ar%e6%ba%a7%e5%9.html 类似乱码的显示。因此需要在编辑文章时，标题下面固定链接项，点击编辑，用拼音或英文输入文章标题。 </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/Screenshot-2019-01-29-17.19.42.png" alt>  </p><p>然后把wordpress目录下的index.php 和 .htaccess文件复制一份到根目录下，.htaccess 是隐藏文件，可以使用ls -all。将其显示出来。注意是复制文件，原来目录下还存在。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/www/html/wordpress/</span><br><span class="line">cp index.php /var/www/html/</span><br><span class="line">cp .htaccess /var/www/html/</span><br></pre></td></tr></table></figure><p>然后使用vim修改.htaccess文件的内容为下图所示。（默认文件如果就是如此则跳过该步骤） </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/20180319093058967.png" alt></p><p>修改index.php文件，因为index.php文件是wordpress下index.php的复制品，因此文件内部的require那一行的值当对于当前目录，是不正确的。同样使用vim编辑该文件，把require那一行路径，修改成下图那样。 </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/20180319093423845.png" alt></p><p>此时再输入IP，看到还是It works界面，那是因为安装apache时，我们看到的It works界面其实是根目录下的index.html。当index.html 和 index.php同时存在时，默认还是打开index.html，所以应该把index.html移出该目录。我们把它移出到其他目录就行。  </p><h4 id="然后可能会产生下一个问题，设置固定链接后，文章页会404"><a href="#然后可能会产生下一个问题，设置固定链接后，文章页会404" class="headerlink" title="然后可能会产生下一个问题，设置固定链接后，文章页会404"></a><strong>然后可能会产生下一个问题，设置固定链接后，文章页会404</strong></h4><p>解决方法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/apache2/apache2.conf</span><br></pre></td></tr></table></figure><p>把 AllowOverride None 改为 AllowOverride ALL</p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/20170922122312719.png" alt></p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/20170922122320129.png" alt></p><p>注意有两处要改，然后操作一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo a2enmod rewrite</span><br><span class="line">sudo /etc/init.d/apache2 restar</span><br></pre></td></tr></table></figure><p>刷新一下应该就能正常打开文章了。</p><h3 id="主页样式修改"><a href="#主页样式修改" class="headerlink" title="主页样式修改"></a><strong>主页样式修改</strong></h3><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/20170413090347184.jpeg" alt></p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/20170413090322305.png" alt></p><p>页尾和功能模块里的链接如果觉得碍眼，可以去除。  </p><h4 id="删除页尾“自豪地使用WordPress”字样"><a href="#删除页尾“自豪地使用WordPress”字样" class="headerlink" title="删除页尾“自豪地使用WordPress”字样"></a><strong>删除页尾“自豪地使用WordPress”字样</strong></h4><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/Screenshot-2019-01-29-18.12.11.png" alt></p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/Screenshot-2019-01-29-18.15.07.png" alt>  </p><p>如果是通过函数生成页尾的主题，一般在模板函数那里修改，查找 “Proudly powered by” 的字样删掉就ok。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=“&lt;?php echo esc\_url( \_\_( ‘http://wordpress.org/’, ‘twentyeleven’ )); ?&gt;” title=“&lt;?php esc\_attr\_e(‘SemanticPersonalPublishing Platform’, ‘twentyeleven’ ); ?&gt;” rel=“generator”&gt;&lt;?php printf( __( ‘Proudly powered by%s’,‘twentyeleven’ ), ‘WordPress’ ); ?&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure><h4 id="删除功能小工具里的“文章RSS”、“评论RSS”、“WordPress-org”"><a href="#删除功能小工具里的“文章RSS”、“评论RSS”、“WordPress-org”" class="headerlink" title="删除功能小工具里的“文章RSS”、“评论RSS”、“WordPress.org”"></a><strong>删除功能小工具里的“文章RSS”、“评论RSS”、“WordPress.org”</strong></h4><p>打开组件文件夹：wp-include/widgets/class-wp-widget-meta.php 找到代码段删除即可。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">!\-\-</span> 屏蔽 <span class="attr">RSS</span> 功能</span></span><br><span class="line">&lt;li&gt;&lt;a href="&lt;?php echo esc\_url( get\_bloginfo( 'rss2\_url' )); ?&gt;"&gt;&lt;?php \_e('Entries &lt;abbr title="Really Simple Syndication"&gt;RSS&lt;/abbr&gt;'); ?&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;?php echo esc\_url( get\_bloginfo( 'comments\_rss2\_url' )); ?&gt;"</span>&gt;</span>&lt;?php _e('Comments &lt;abbr title="Really Simple Syndication"&gt;RSS&lt;/abbr&gt;'); ?&gt;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WordPress </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>性冷淡商务风：深圳龙华希尔顿逸林酒店</title>
      <link href="/doubletree-longhua/"/>
      <url>/doubletree-longhua/</url>
      
        <content type="html"><![CDATA[<p>龙华年初新开了间 DoubleTree，从此深圳也有CAT2的希尔顿了。可惜的是积分房常年不放10000分的基础房型，还好连续两日及以上还能订到基础房，配合 Hilton Q1 促销每晚送2000分活动，非常适合保级刷房。   </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress1-1548760825.jpeg" alt="性冷淡商务风：深圳龙华希尔顿逸林酒店"></p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress5-1548760828.jpeg" alt="性冷淡商务风：深圳龙华希尔顿逸林酒店">  </p><p>酒店在粤商中心大厦1-15层，坐落于龙华文化广场旁，隔壁是龙华星河ICO，距离地铁清湖站较近，周围还算繁华，据说是龙华新区首家五星级国际酒店。粤商中心这栋楼全玻璃覆盖显得比较商务，符合 DoubleTree 品牌的定位。   </p><a id="more"></a><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress6-1548760829.jpeg" alt="性冷淡商务风：深圳龙华希尔顿逸林酒店"></p><p>一进大堂就是典型的 DoubleTree 性冷淡风格，米白色大理石为主的装修风格使原本较小的大堂显得大气，前台人手不够，客人多时要排队 CI/CO，上酒廊 Check-in 就更是要等很久了。   </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress5-1548760829.jpeg" alt="性冷淡商务风：深圳龙华希尔顿逸林酒店"></p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress2-1548760830.jpeg" alt="性冷淡商务风：深圳龙华希尔顿逸林酒店"></p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress10-1548760831.jpeg" alt="性冷淡商务风：深圳龙华希尔顿逸林酒店"></p><p>酒店被设计在这栋楼底部十几层，上半部分是写字楼，似乎业主不太重视酒店。   </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress9-1548760832.jpeg" alt="性冷淡商务风：深圳龙华希尔顿逸林酒店">  </p><p>这次入住时房态紧张，只给升一级到12楼的园景房，虽然没升级到行政房不过也给了行政待遇。   </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress0-1548760833.jpeg" alt="性冷淡商务风：深圳龙华希尔顿逸林酒店"></p><p>DoubleTree 标志性的热曲奇饼，每位顾客入住时都给两份，很好吃，路过前台时可以再要几块。   </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress3-1548760835.jpeg" alt="性冷淡商务风：深圳龙华希尔顿逸林酒店"></p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress2-1548760837.jpeg" alt="性冷淡商务风：深圳龙华希尔顿逸林酒店"></p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress3-1548760837.jpeg" alt="性冷淡商务风：深圳龙华希尔顿逸林酒店"></p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress9-1548760839.jpeg" alt="性冷淡商务风：深圳龙华希尔顿逸林酒店"></p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress8-1548760840.jpeg" alt="性冷淡商务风：深圳龙华希尔顿逸林酒店"></p><p>因为是新开业的酒店，硬件水准在同品牌中数一数二，客房面积48平方起步也没什么问题，套房楼层据说被某剧组包了几个月，因此没能升级套房挺可惜的。   </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress9-1548760842.jpeg" alt="性冷淡商务风：深圳龙华希尔顿逸林酒店"></p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress6-1548760843.jpeg" alt="性冷淡商务风：深圳龙华希尔顿逸林酒店"></p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress2-1548760845.jpeg" alt="性冷淡商务风：深圳龙华希尔顿逸林酒店"></p><p>逸林标配单人浴缸，卫生间干湿分离，瑰珀翠（Crabtree &amp; Evelyn）的备品味道一般，还是更喜欢彼得罗夫（Peter Thomas Roth）的热情果味。   </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress10-1548760846.jpeg" alt="性冷淡商务风：深圳龙华希尔顿逸林酒店"></p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress10-1548760847.jpeg" alt="性冷淡商务风：深圳龙华希尔顿逸林酒店"></p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress6-1548760848.jpeg" alt="性冷淡商务风：深圳龙华希尔顿逸林酒店"></p><p>窗外正对龙华文化广场，也是新建的，晚上有大批广场舞大妈，幸好玻璃隔音性能不错，问题是晚上有治安的单车持续闪烁红蓝灯光，穿透力极强，不拉上遮光窗帘要被闪瞎眼。   </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress0-1548760850.jpeg" alt="性冷淡商务风：深圳龙华希尔顿逸林酒店"></p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress0-1548760852.jpeg" alt="性冷淡商务风：深圳龙华希尔顿逸林酒店"></p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress5-1548760853.jpeg" alt="性冷淡商务风：深圳龙华希尔顿逸林酒店"></p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress6-1548760855.jpeg" alt="性冷淡商务风：深圳龙华希尔顿逸林酒店"></p><p>床头音响支持直接插 iPhone 播放，插座自带USB也是这几年新开酒店的标配了。欢迎水果略显小气，进门的柜子另有玄机，水壶茶杯和小冰箱都藏在里面。   </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress2-1548760855.jpeg" alt="性冷淡商务风：深圳龙华希尔顿逸林酒店"></p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress2-1548760856.jpeg" alt="性冷淡商务风：深圳龙华希尔顿逸林酒店"></p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress1-1548760857.jpeg" alt="性冷淡商务风：深圳龙华希尔顿逸林酒店"></p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress8-1548760859.jpeg" alt="性冷淡商务风：深圳龙华希尔顿逸林酒店"></p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress7-1548760862.jpeg" alt="性冷淡商务风：深圳龙华希尔顿逸林酒店"></p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress2-1548760863.jpeg" alt="性冷淡商务风：深圳龙华希尔顿逸林酒店"></p><p>行政酒廊的 Happy Hour 从17点到19点，菜品十分丰富，热菜、甜品很多，当作晚餐完全没有问题。   </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress10-1548760865.jpeg" alt="性冷淡商务风：深圳龙华希尔顿逸林酒店"></p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress6-1548760865.jpeg" alt="性冷淡商务风：深圳龙华希尔顿逸林酒店"></p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress3-1548760866.jpeg" alt="性冷淡商务风：深圳龙华希尔顿逸林酒店"></p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress5-1548760867.jpeg" alt="性冷淡商务风：深圳龙华希尔顿逸林酒店"></p><p>酒店健身房还没装修好，把酒廊对面的一间套房改造成了一个临时健身房，所以面积很小，设备也不够多，来几个老外就占满了。室外泳池也要到17年5月底才开放。   </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress1-1548760868.jpeg" alt="性冷淡商务风：深圳龙华希尔顿逸林酒店"></p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress9-1548760870.jpeg" alt="性冷淡商务风：深圳龙华希尔顿逸林酒店"></p><p>回到房间发现已经开好了夜床，可能是看到一下子把两瓶水喝完了，于是又补充了六瓶😂而且很贴心地在床上放了张明日天气预报。   </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress7-1548760872.jpeg" alt="性冷淡商务风：深圳龙华希尔顿逸林酒店"></p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress1-1548760874.jpeg" alt="性冷淡商务风：深圳龙华希尔顿逸林酒店"></p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress8-1548760875.jpeg" alt="性冷淡商务风：深圳龙华希尔顿逸林酒店"></p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress8-1548760876.jpeg" alt="性冷淡商务风：深圳龙华希尔顿逸林酒店"></p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress4-1548760878.jpeg" alt="性冷淡商务风：深圳龙华希尔顿逸林酒店"></p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress0-1548760880.jpeg" alt="性冷淡商务风：深圳龙华希尔顿逸林酒店"></p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress0-1548760882.jpeg" alt="性冷淡商务风：深圳龙华希尔顿逸林酒店"></p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress3-1548760884.jpeg" alt="性冷淡商务风：深圳龙华希尔顿逸林酒店"></p><p>酒店的主餐厅名为 『OPEN | “開”全日餐厅』，然而晚上只营业到22点，并没有通宵开放😑 早餐看似丰富，实际出品一般，蛋卷和鸡肉肠还没有希尔顿花园的好吃。不过餐厅环境确实不错，适合平时晚上来吃自助餐。   </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress8-1548760885.jpeg" alt="性冷淡商务风：深圳龙华希尔顿逸林酒店"></p><p>这间 DoubleTree 最近几个月都不放基础房了，可能确实是商务客比较多吧， 10000分入住虽然没有华东一堆5000分 DoubleTree 那么白菜价，但毕竟地处深圳龙华腹地，性价比非常高，实属希尔顿保级优选。      </p><blockquote><p>原文始发于微信公众号（派大星星星星）：<a href="http://mp.weixin.qq.com/s/3AVq0D4fRAt10VIMWOGvmw" target="_blank" rel="noopener">性冷淡商务风：深圳龙华希尔顿逸林酒店</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hotel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>宜家 | 一个顺便卖卖家具的饭堂</title>
      <link href="/ikea-canteen/"/>
      <url>/ikea-canteen/</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress0-1548761309.jpeg" alt="宜家 | 一个顺便卖卖家具的饭堂"></p><p>相信很多人印象中的宜家只是个卖家具的地方</p><p>跟自己关系不大</p><p>去那里干嘛</p><a id="more"></a><p>然而事实上并不是这样的  </p><p>宜家不只是卖家具</p><p>也卖非常多零碎玩意</p><p>很适合买来充实宿舍</p><p>但更重要的是它的餐厅</p><!-- more --><p>一个室友说</p><p>“宜家就是个顺便卖家具的食堂”</p><p>这话不假</p><p>这个餐厅不只是周末人满为患</p><p>即便是工作日也要找座位找很久</p><p>这还是宜家坐落在没有地铁经过的郊区的前提下</p><p>显得更为难得</p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress10-1548761310.jpeg" alt="宜家 | 一个顺便卖卖家具的饭堂"></p><p>▲餐厅门口菜单</p><p>餐厅不算太大</p><p>菜单也很简单</p><p>主菜也就瑞典肉圆 蔬菜丸 肉酱面 三文鱼 西冷牛扒 牛肉饭等</p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress5-1548761312.jpeg" alt="宜家 | 一个顺便卖卖家具的饭堂"></p><p>最赞的就是瑞典肉圆了</p><p>不同于汕头牛肉丸爽口 弹性 有嚼劲</p><p>宜家的瑞典肉圆口感细腻 用料丰富</p><p>以猪肉和牛肉混合搅碎</p><p>加入牛奶 面包糠 切碎的洋葱 马铃薯粉或燕麦片</p><p>然后再加上白胡椒 盐 五香粉或肉桂等香料调味</p><p>搓匀后捏成球形  </p><p>食用时配以肉酱 土豆泥 果酱以及一枚瑞典国旗  </p><p>令人食指大动</p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress0-1548761313.jpeg" alt="宜家 | 一个顺便卖卖家具的饭堂"></p><p>西冷牛扒出品还算可以</p><p>虽然跟专门做牛扒的餐厅相比差距不小</p><p>但考虑到三十多的售价也能理解 还是值这个价的</p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress9-1548761314.jpeg" alt="宜家 | 一个顺便卖卖家具的饭堂"></p><p>烤三文鱼配通心粉</p><p>份量十足</p><p>不到三十块</p><p>价格感人</p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress7-1548761316.jpeg" alt="宜家 | 一个顺便卖卖家具的饭堂"></p><p>奥尔良鸡腿</p><p>表皮烤的焦焦的</p><p>肉质多汁嫩滑</p><p>跟肉丸一样也是必点</p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress3-1548761318.jpeg" alt="宜家 | 一个顺便卖卖家具的饭堂"></p><p>冷盘菜</p><p>香草三文鱼</p><p>酸黄瓜酱不会掩盖三文鱼的鲜美</p><p>反而相得益彰美味可口</p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress2-1548761319.jpeg" alt="宜家 | 一个顺便卖卖家具的饭堂"></p><p>宜家物价让人有种回到十年前的感觉</p><p>在深圳物价飞涨都快赶上香港的年代</p><p>还有这么个出品优良又便宜的餐厅实属不易</p><p>如果不是因为路途遥远交通不便利真的就成饭堂了</p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress10-1548761320.jpeg" alt="宜家 | 一个顺便卖卖家具的饭堂"></p><p>▲取菜窗口超像饭堂</p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress3-1548761323.jpeg" alt="宜家 | 一个顺便卖卖家具的饭堂"></p><p>说是饭堂的另一个原因</p><p>顾客吃完后需要自己把餐盘放进回收车里</p><p>大大减少清洁阿姨工作量</p><hr><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress3-1548761325.jpeg" alt="宜家 | 一个顺便卖卖家具的饭堂"></p><p>▲会员卡颜值颇高</p><p>记得办一张宜家的会员卡</p><p>在入口和收银台前都有免费申请的电脑</p><p>填完资料直接就吐卡出来了</p><p>工作日凭会员卡可以在餐厅免费喝咖啡</p><p>无限续杯的喔</p><p>而且很多单品都有会员优惠</p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress2-1548761327.jpeg" alt="宜家 | 一个顺便卖卖家具的饭堂"></p><p>比如这个两块九的杯子  </p><p>新会员可以一块钱购买</p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress9-1548761329.jpeg" alt="宜家 | 一个顺便卖卖家具的饭堂"></p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress10-1548761330.jpeg" alt="宜家 | 一个顺便卖卖家具的饭堂"></p><p>值得一提的是毛巾和门垫  </p><p>毛巾质量很好 不会掉毛</p><p>门垫价格感人</p><p>可以屯多几张在宿舍</p><p>脏了直接换一个</p><hr><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress3-1548761331.jpeg" alt="宜家 | 一个顺便卖卖家具的饭堂"></p><p>在收银台出来的地方还有一个小食档</p><p>五块钱的热狗套餐可以无限续杯</p><p>最近饮料都换成了相比可乐含糖量减半的北欧风味果味饮料</p><p>不过感觉还是以前的蔓越莓果汁好喝</p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress9-1548761333.jpeg" alt="宜家 | 一个顺便卖卖家具的饭堂"></p><p>还有就是十块三串的墨鱼丸</p><p>真心赞赞赞赞赞</p><p>外焦里嫩弹牙可口</p><p>墨鱼味十足</p><p>买买买后吃上一份墨鱼丸真是酸爽</p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress5-1548761334.jpeg" alt="宜家 | 一个顺便卖卖家具的饭堂"></p><p>还有同样十块三串的烤肠  </p><p>味道跟乐凯撒的烤肠差不多</p><p>因为量不多</p><p>晚上七八点后可能就卖完了</p><p>同样强力推荐</p><p>见到了赶紧买三串</p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress10-1548761335.jpeg" alt="宜家 | 一个顺便卖卖家具的饭堂"></p><p>小食档旁边还有专门卖瑞典特产的超市</p><p>如果肉丸或者三文鱼吃的不过瘾还能买冷冻的回去自己煮</p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress10-1548761336.jpeg" alt="宜家 | 一个顺便卖卖家具的饭堂"></p><p>阻挡宜家成为饭堂的最大因素还是地理位置不好</p><p>公交非常不便利</p><p>只能自驾或者打车前往</p><p>不过不塞车的话从桂庙过去十分钟就能到</p><p>所以闲暇之余还是可以去吃餐饭的</p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress5-1548761337.jpeg" alt="宜家 | 一个顺便卖卖家具的饭堂"></p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress3-1548761337.jpeg" alt="宜家 | 一个顺便卖卖家具的饭堂"></p><blockquote><p>原文始发于微信公众号（派大星星星星）：<a href="http://mp.weixin.qq.com/s/fml6LiuDyC8qeY6rLNhtpw" target="_blank" rel="noopener">宜家 | 一个顺便卖卖家具的饭堂</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Food </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一蘭拉面</title>
      <link href="/ichiran-ramen/"/>
      <url>/ichiran-ramen/</url>
      
        <content type="html"><![CDATA[<p>一蘭拉面</p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress0-1548759254.jpeg" alt="一蘭拉面"><br>▲铜锣湾店门口 </p><p>一蘭拉面的特点在于座位是隔间并且24小时运营，很适合深夜下班后一个人来吃，不会尴尬。 </p><a id="more"></a><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress7-1548759255.jpeg" alt="一蘭拉面"><br>▲座位都是一个个隔间 </p><p>年初的时候，一兰除了日本本土外就只有铜锣湾一家分店，港岛线铜锣湾站C出口走5分钟谢斐道440号门面便是。店铺不算大，目测只能容纳50人，天黑了之后一直到凌晨三四点都要排队，22点左右高峰期甚至要排一个钟的队，不过为了吃上一碗一兰拉面，排队久一点也值得。 </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress9-1548759257.jpeg" alt="一蘭拉面"><br>▲铜锣湾店排队排出了店面   </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress9-1548759259.jpeg" alt="一蘭拉面"><br>▲空余座位展示，每个绿色格子代表一个座位 </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress3-1548759262.jpeg" alt="一蘭拉面"><br>▲只有一款面的菜单 </p><p>排队快到的时候店员会给单你让你圈出偏好，我除了硬度喜欢偏硬一些外其他都是普通。偏硬是因为咬起来有口感。一碗89块港币的拉面，精华在于汤底，浓香而不腻，实打实用豚骨熬制，不加味精。吃完面后如果不喝汤就太浪费了。 </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress4-1548759263.jpeg" alt="一蘭拉面"><br>▲1/2倍辣 </p><p>因为还是学生，钱不多，所以很少追加面底、温泉蛋、叉烧或者波子汽水。不过温泉蛋是真心好吃，建议尾巴们去的话一定要点一份。 秘制酱汁确实挺辣的，有一次被怂恿写了5倍辣，吃完整个人都不好了，当晚睡觉都睡不好。当然主要是因为我不太能吃辣，无辣不欢的尾巴可以试试20倍辣，很酸爽[doge] </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress10-1548759264.jpeg" alt="一蘭拉面"><br>▲5倍辣 </p><p>店面是单人隔间，每个位置都有冷水水龙头，就算再冷的天也是冷水。网上的解释是  </p><blockquote><p>冰水的作用在於吃拉面时缓和浓厚的味道，同时有助口腔降温加快吃面速度，因为面太热而吃得慢，面浸汤糊烂的情况只会越来越严重。 冰水是多年来日式拉面的传统，春夏秋冬也不改。博主曾在下雪日子在拉面店外排队，店员会为等待的人送上热茶，但去到店内还是冰水。 希望大家不要因為气温10度时拉面店内送上冰水就破口大骂或上网劣评，人家日本人下雪时都未投诉。理解这原因后仍想要热水的话，向店员礼貌地要求就是了。</p></blockquote><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress3-1548759265.jpeg" alt="一蘭拉面"><br>▲每个座位上都有首次来店顾客指南，中英日各一份 </p><p>今年年中的时候，一兰在尖沙咀棉登径8号负一楼开了第二家分店。不知道什么原因，很多地图上都还没有标记出来，尖沙咀N4出口出来就是了。 </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress9-1548759265.jpg" alt="一蘭拉面"><br>▲高德地图 </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress4-1548759267.jpeg" alt="一蘭拉面"><br>▲尖沙咀店入口，店铺在负一楼 </p><p>可能是因为在铜锣湾的第一家海外分店尝到了甜头，这家新分店面积很大，而且出现了一兰屋台，就是普通餐厅的座椅区，但我还是喜欢隔间多一点，毕竟隔间是一兰的特色，坐屋台的话没有感觉。 </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress5-1548759269.jpeg" alt="一蘭拉面"><br>▲尖沙咀店一兰屋台 </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress0-1548759271.jpeg" alt="一蘭拉面"><br>▲一兰方便面 </p><p>一兰方便面，四五月份刚推出的时候有买单满200HKD送一个的活动，回来宿舍泡了一下发现挺一般的，跟店里吃的差距太大，不知道是方便面的问题还是我泡面方法不当[摊手]原价是198HKD五包，据说买一套的话里面会有特殊配料 </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress4-1548759272.jpeg" alt="一蘭拉面"><br>▲泡出来的效果，凭良心讲确实比合味道之类的好吃一些，但还不至于太好吃，不值那个价。 </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress6-1548759275.jpeg" alt="一蘭拉面"><br>▲方便面海报 </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress4-1548759279.jpeg" alt="一蘭拉面"><br>▲收银台 </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress0-1548759280.jpeg" alt="一蘭拉面"><br>▲收银台后面的展柜 </p><p>月初去吃的时候发现账单多了一项额外10%的服务费，以前都没见过，不知道是最近才开始收的还是因为尖沙咀店比较大要额外收费。付款支持现金、八达通和银联卡，我预计不用太久，支付宝就会来插一脚，进一步方便大陆游客在香港游玩。 </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress9-1548759281.jpeg" alt="一蘭拉面"><br>▲尖沙咀店内海报 </p><p>还没读大学的时候在广州住，每次去正佳和中华基本上都是吃博多一幸舍。博多刚进驻广州第一次吃的时候震惊了，怎么会有这么好吃的面，从此再也没吃过味千公仔面。 然而上大学后，某次安利别人博多时被反安利了一兰，这才发觉山外有山。 </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress2-1548759282.jpeg" alt="一蘭拉面"><br>▲铜锣湾店门面 </p><p>一兰没有博多一幸舍的喧闹环境，店员们不会热血地齐声用日语喊欢迎光临，只会在隔间后面端面上来时说一声慢用（不会日语，猜的）然后落下帘子。店里如果没有小孩的话一般都挺安静。 另外不同于博多丰富的菜单，一兰只有一款面（好像最近新推出了一款沾面，不太记得了）。 </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress6-1548759283.jpeg" alt="一蘭拉面"><br>▲基友吃得正欢 </p><p>在我有限的经历中，一兰拉面在我吃过的日本拉面中算是最好吃的了，一兰以其独特的隔间设计，只做一款面的坚持，极致浓香的汤底，口感细腻的面底赢得了大众的喜爱。有时候我嘴馋了也不怕劳累，专门从深圳湾过关搭巴士到天水围转港铁到尖沙咀来吃个面，也算是一兰真粉了。 大家如果去一兰，一定要预留多一些时间用来排队，以免耽误行程。[doge] </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/beepress0-1548759283.jpeg" alt="一蘭拉面"></p><blockquote><p>原文始发于微信公众号（派大星星星星）：<a href="http://mp.weixin.qq.com/s/85y8zF4qNyA2NR8sBmuNLQ" target="_blank" rel="noopener">一蘭拉面</a></p></blockquote><h3 id="2019-01更新-—-日本的一蘭拉面"><a href="#2019-01更新-—-日本的一蘭拉面" class="headerlink" title="2019.01更新 — 日本的一蘭拉面"></a>2019.01更新 — 日本的一蘭拉面</h3><p>  2018年夏天去大阪和东京晃悠了一圈，路过不少一兰。  </p><h3 id="大阪"><a href="#大阪" class="headerlink" title="大阪"></a>大阪</h3><h4 id><a href="#" class="headerlink" title=" "></a> </h4><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/IMG_2417.jpg" alt><br>▲大阪也超多人</p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/IMG_7512.jpg" alt><br>▲自助机器先付后食，这种机器是真的🐂🍺   </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/IMG_4485.jpg" alt><br>▲自助机出的票   </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/IMG_4487.jpg" alt><br>▲出品稳定，跟香港的几乎没区别      </p><h3 id="东京"><a href="#东京" class="headerlink" title="东京"></a>东京</h3><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/IMG_7086.jpg" alt><br>▲还是自助机，依然人多得一批   </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/IMG_5225.jpg" alt><br>▲还是一样的味道   </p><p><img src="https://raw.githubusercontent.com/Fongim/personal_blog_image/master/image/IMG_5497.jpg" alt><br>▲一样的抹茶豆腐</p>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Food </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
